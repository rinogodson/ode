import * as LucideIcons from "lucide-react";
import { useEffect, useRef, useState } from "react";
import YouTubePlayer from "../YoutubePlayer/YoutubePlayer";
import {
  playFn,
  pauseFn,
  ytSetup,
  getTitle,
  seekFn,
} from "@/services/serviceProvider";
import Slider from "../Slider/Slider";
import React from "react";
function Player({
  next_fn,
  prev_fn,
  timestamp,
  setTimestamp,
  currentSong,
  yt_ref,
}: {
  next_fn: () => void;
  prev_fn: () => void;
  timestamp: number;
  setTimestamp: React.Dispatch<React.SetStateAction<number>>;
  currentSong: string;
  yt_ref: React.RefObject<HTMLIFrameElement>;
}) {
  const [playing, setPlaying] = useState(false);
  const time_bar_ref = useRef(null);

  useEffect(() => {
    if (!yt_ref.current) return;
    ytSetup(yt_ref);

    const handleTimeUpdate = (data: { current: number; total: number }) => {
      setTimestamp(data);
    };

    yt_ref.current.addEventListener("ytmessage", (e: any) => {
      const { info } = e.detail || {};
      if (info?.progressState) {
        handleTimeUpdate({
          current: info.progressState.current,
          total: info.progressState.duration,
        });
      }
    });

    yt_ref.current.addEventListener("ytstatechange", (e: any) => {
      console.log(e.detail);
      getTitle();
    });
  }, []);

  return (
    <>
      <YouTubePlayer yt_ref={yt_ref} currentSong={currentSong} />
      <div className="flex flex-col gap-4 h-130 bg-[#0f0f0f] rounded-[100px] border-[rgba(255,255,255,0.1)] border-[1px] p-10">
        <div  className="flex justify-center gap-4 items-center">
          <button onClick={() => seekFn(timestamp.current - 10)} className="p-5 rounded-[100px_20px_20px_20px] h-[calc(100%)] relative inline-flex items-center justify-center border-2 border-transparent bg-neutral-700 shadow-[inset_1px_1px_50px_rgba(0,0,0,0.5),inset_-1px_-1px_50px_rgba(0,0,0,0.2),2px_2px_4px_#000] text-white uppercase tracking-wider text-center transition-all duration-50 active:scale-[0.98] active:bg-neutral-800 active:shadow-[inset_0_0_50px_rgba(0,0,0,0.5),inset_1px_1px_1px_transparent,inset_-1px_-1px_1px_transparent,2px_2px_50px_transparent] active:brightness-[0.8]">
            <LucideIcons.RotateCcw size={25} />
          </button>
          <div
            ref={time_bar_ref}
            className="bg-black w-full gap-1 h-[7em] px-8 rounded-[calc(100px_-_2.5rem)] border-[1px] border-[rgba(255,255,255,0.1)] flex justify-evenly items-center"
          >
            {Array.from({ length: 14 }).map((_, i) => (
              <div
                key={i}
                className="w-[0.4em] mx-3 bg-[rgba(255,255,255,0.1)] h-[calc(100%_-_2em)] rounded-full"
              ></div>
            ))}
            <Slider
              minimum={0}
              maximum={timestamp.total}
              value={timestamp.current}
              onChangeFn={(e) => {
                seekFn(Number(e.target.value));
              }}
            />
          </div>
          <button onClick={() => seekFn(timestamp.current + 10)} className="p-5 rounded-[20px_100px_20px_20px] h-[calc(100%)] relative inline-flex items-center justify-center border-2 border-transparent bg-neutral-700 shadow-[inset_1px_1px_50px_rgba(0,0,0,0.5),inset_-1px_-1px_50px_rgba(0,0,0,0.2),2px_2px_4px_#000] text-white uppercase tracking-wider text-center transition-all duration-50 active:scale-[0.98] active:bg-neutral-800 active:shadow-[inset_0_0_50px_rgba(0,0,0,0.5),inset_1px_1px_1px_transparent,inset_-1px_-1px_1px_transparent,2px_2px_50px_transparent] active:brightness-[0.8]">
            <LucideIcons.RotateCw size={20} />
          </button>
        </div>
        <div className="w-full h-full bg-black"></div>
        {/* button container */}
        <div className="h-full grid grid-cols-3 gap-2 place-items-center justify-center items-center">
          <Button lucideString="SkipBack" clickAction={prev_fn} scale={2} />
          <Button
            lucideString={playing ? "Pause" : "Play"}
            clickAction={() => {
              setPlaying(!playing);
              playing ? pauseFn(yt_ref) : playFn(yt_ref);
            }}
            scale={3}
          />
          <Button lucideString="SkipForward" clickAction={next_fn} scale={2} />
        </div>
      </div>
    </>
  );
}

export default Player;

{
  /* button component */
  /* need to refactor this later */
}

export const Button = ({
  lucideString,
  clickAction,
  scale,
}: {
  lucideString: string;
  clickAction: () => void;
  scale?: number;
}) => {
  const Icon = (LucideIcons[lucideString as keyof typeof LucideIcons] ??
    LucideIcons.Ban) as React.ElementType;
  return (
    <button
      onClick={clickAction}
      className="relative inline-flex items-center justify-center w-24 aspect-square border-2 border-transparent rounded-full bg-neutral-700 shadow-[inset_1px_1px_50px_rgba(0,0,0,0.5),inset_-1px_-1px_50px_rgba(0,0,0,0.2),2px_2px_4px_#000] text-white uppercase tracking-wider text-center transition-all duration-50 active:scale-[0.98] active:bg-neutral-800 active:shadow-[inset_0_0_50px_rgba(0,0,0,0.5),inset_1px_1px_1px_transparent,inset_-1px_-1px_1px_transparent,2px_2px_50px_transparent] px-3 py-2 active:brightness-[0.8]"
      style={{
        width: `calc(${scale ?? 1} * 4em )`,
      }}
    >
      <Icon
        className="text-[rgba(210,210,210,0.9)] w-full aspect-square"
        size={(scale ?? 1) * 20}
      />
    </button>
  );
};
